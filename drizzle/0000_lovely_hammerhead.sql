-- Current sql file was generated after introspecting the database
-- If you want to run this migration please uncomment this code before executing migrations
/*
CREATE SCHEMA "dt_dwh";
--> statement-breakpoint
CREATE SEQUENCE "dt_dwh"."m_company_inCompanyCode_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1 CACHE 1;--> statement-breakpoint
CREATE SEQUENCE "dt_dwh"."m_bank_inBankTypeCode_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 32767 START WITH 1 CACHE 1;--> statement-breakpoint
CREATE SEQUENCE "dt_dwh"."m_religion_inReligionCode_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 32767 START WITH 1 CACHE 1;--> statement-breakpoint
CREATE SEQUENCE "dt_dwh"."m_position_inPositionCode_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 32767 START WITH 1 CACHE 1;--> statement-breakpoint
CREATE SEQUENCE "dt_dwh"."m_company_type_inCompanyTypeCode_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 32767 START WITH 1 CACHE 1;--> statement-breakpoint
CREATE SEQUENCE "dt_dwh"."m_employment_inEmploymentTypeCode_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 32767 START WITH 1 CACHE 1;--> statement-breakpoint
CREATE SEQUENCE "dt_dwh"."m_roles_inRoleCode_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 32767 START WITH 1 CACHE 1;--> statement-breakpoint
CREATE TABLE "dt_dwh"."m_religion" (
	"uiReligionId" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"daCreatedAt" timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL,
	"daUpdatedAt" timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL,
	"inReligionCode" smallint GENERATED BY DEFAULT AS IDENTITY (sequence name "dt_dwh"."dt_dwh."m_religion_inReligionCode_seq"" INCREMENT BY 1 MINVALUE 1 MAXVALUE 32767 START WITH 1),
	"txReligionName" text NOT NULL,
	"boActive" boolean NOT NULL,
	"boStatus" boolean NOT NULL,
	CONSTRAINT "m_religion_daUpdatedAt_key" UNIQUE("daUpdatedAt"),
	CONSTRAINT "m_religion_inReligionCode_key" UNIQUE("inReligionCode"),
	CONSTRAINT "m_religion_txReligionName_key" UNIQUE("txReligionName")
);
--> statement-breakpoint
ALTER TABLE "dt_dwh"."m_religion" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "dt_dwh"."m_roles" (
	"uiRolesId" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"daCreatedAt" timestamp with time zone DEFAULT now() NOT NULL,
	"daUpdatedAt" timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL,
	"inRoleCode" smallint GENERATED BY DEFAULT AS IDENTITY (sequence name "dt_dwh"."dt_dwh."m_roles_inRoleCode_seq"" INCREMENT BY 1 MINVALUE 1 MAXVALUE 32767 START WITH 1),
	"txLongRoleName" text NOT NULL,
	"txRoleDescription" text,
	"txShortRoleName" text,
	CONSTRAINT "m_roles_inRoleCode_key" UNIQUE("inRoleCode"),
	CONSTRAINT "m_roles_inRoleCode_key1" UNIQUE("inRoleCode"),
	CONSTRAINT "m_roles_txRoleName_key" UNIQUE("txLongRoleName")
);
--> statement-breakpoint
ALTER TABLE "dt_dwh"."m_roles" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "dt_dwh"."m_bank" (
	"uiBankId" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"daCreatedAt" timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL,
	"daUpdatedAt" timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL,
	"inBankTypeCode" smallint GENERATED BY DEFAULT AS IDENTITY (sequence name "dt_dwh"."dt_dwh."m_bank_inBankTypeCode_seq"" INCREMENT BY 1 MINVALUE 1 MAXVALUE 32767 START WITH 1),
	"txBankName" text NOT NULL,
	"boLocalBank" boolean DEFAULT true NOT NULL,
	"boActive" boolean DEFAULT true NOT NULL,
	"boStatus" boolean DEFAULT true NOT NULL,
	"boEWallet" boolean DEFAULT false NOT NULL,
	CONSTRAINT "m_bank_inBankTypeCode_key" UNIQUE("inBankTypeCode"),
	CONSTRAINT "m_bank_txBankName_key" UNIQUE("txBankName")
);
--> statement-breakpoint
ALTER TABLE "dt_dwh"."m_bank" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "dt_dwh"."m_position" (
	"uiPositionId" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"daCreatedAt" timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL,
	"daUpdatedAt" timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL,
	"inPositionCode" smallint GENERATED BY DEFAULT AS IDENTITY (sequence name "dt_dwh"."dt_dwh."m_position_inPositionCode_seq"" INCREMENT BY 1 MINVALUE 1 MAXVALUE 32767 START WITH 1),
	"txPositionName" text NOT NULL,
	"txPositionDetails" text,
	"boActive" boolean DEFAULT true NOT NULL,
	"boStatus" boolean DEFAULT true NOT NULL,
	CONSTRAINT "m_position_inPositionCode_key" UNIQUE("inPositionCode"),
	CONSTRAINT "m_position_txPositionName_key" UNIQUE("txPositionName")
);
--> statement-breakpoint
ALTER TABLE "dt_dwh"."m_position" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "dt_dwh"."reimbursement_items" (
	"uiReimbursementItemID" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"daCreatedAt" timestamp with time zone DEFAULT now() NOT NULL,
	"daUpdatedAt" timestamp with time zone NOT NULL,
	"inReimbursementNoteID" integer NOT NULL,
	"txName" text NOT NULL,
	"inQuantity" integer NOT NULL,
	"deIndividualPrice" numeric(100, 2) NOT NULL,
	"deTotalPrice" numeric(100, 2) NOT NULL,
	"txCurrency" text NOT NULL,
	"inCategoryID" smallint NOT NULL
);
--> statement-breakpoint
ALTER TABLE "dt_dwh"."reimbursement_items" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "dt_dwh"."m_employment" (
	"uiEmploymentId" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"daCreatedAt" timestamp DEFAULT now() NOT NULL,
	"daUpdatedAt" timestamp DEFAULT now() NOT NULL,
	"inEmploymentTypeCode" smallint GENERATED BY DEFAULT AS IDENTITY (sequence name "dt_dwh"."dt_dwh."m_employment_inEmploymentTypeCode_seq"" INCREMENT BY 1 MINVALUE 1 MAXVALUE 32767 START WITH 1),
	"txEmploymentTypeName" text NOT NULL,
	"boActive" boolean NOT NULL,
	"boStatus" boolean NOT NULL,
	CONSTRAINT "m_employment_inEmploymentTypeCode_key" UNIQUE("inEmploymentTypeCode"),
	CONSTRAINT "m_employment_txEmploymentTypeName_key" UNIQUE("txEmploymentTypeName")
);
--> statement-breakpoint
ALTER TABLE "dt_dwh"."m_employment" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "dt_dwh"."m_company_type" (
	"uiCompanyTypeId" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"daCreatedAt" timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL,
	"daUpdatedAt" timestamp with time zone DEFAULT (now() AT TIME ZONE 'utc'::text) NOT NULL,
	"inCompanyTypeCode" smallint GENERATED BY DEFAULT AS IDENTITY (sequence name "dt_dwh"."dt_dwh."m_company_type_inCompanyTypeCode_seq"" INCREMENT BY 1 MINVALUE 1 MAXVALUE 32767 START WITH 1),
	"txLongCompanyTypeName" text NOT NULL,
	"txShortCompanyTypeName" text NOT NULL,
	"boActive" boolean NOT NULL,
	"boStatus" boolean NOT NULL,
	CONSTRAINT "m_company_type_inCompanyTypeCode_key" UNIQUE("inCompanyTypeCode"),
	CONSTRAINT "m_company_type_txLongCompanyTypeName_key" UNIQUE("txLongCompanyTypeName"),
	CONSTRAINT "m_company_type_txShortCompanyTypeName_key" UNIQUE("txShortCompanyTypeName")
);
--> statement-breakpoint
ALTER TABLE "dt_dwh"."m_company_type" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "dt_dwh"."m_employees" (
	"uiEmployeeId" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"daCreatedAt" timestamp DEFAULT now() NOT NULL,
	"daUpdatedAt" timestamp with time zone DEFAULT now() NOT NULL,
	"daJoinDate" date NOT NULL,
	"inYear" integer NOT NULL,
	"inMonth" smallint NOT NULL,
	"txFullName" text NOT NULL,
	"daDateOfBirth" date NOT NULL,
	"txHomeAddress" text NOT NULL,
	"txNationalIdNumber" text NOT NULL,
	"inReligionCode" smallint NOT NULL,
	"txTaxNumber" text NOT NULL,
	"boMarriageStatus" boolean NOT NULL,
	"inNumOfDeps" smallint NOT NULL,
	"flSalary" double precision NOT NULL,
	"inRoleCode" smallint NOT NULL,
	"boActive" boolean NOT NULL,
	"boStatus" boolean NOT NULL,
	"inEmploymentTypeCode" smallint NOT NULL,
	"txEmployeeCode" text NOT NULL,
	"inCompanyCode" integer NOT NULL,
	"txPhoneNumber" text NOT NULL,
	"txEmailAddress" text NOT NULL,
	"inBankTypeCode" smallint NOT NULL,
	"txBankAccountNumber" text NOT NULL
);
--> statement-breakpoint
ALTER TABLE "dt_dwh"."m_employees" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "dt_dwh"."reimbursement_notes" (
	"uiReimbursementID" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"daCreatedAt" timestamp with time zone DEFAULT now() NOT NULL,
	"daUpdatedAt" timestamp with time zone DEFAULT now() NOT NULL,
	"inReimbursementNoteID" integer NOT NULL,
	"txStatus" text NOT NULL,
	"txNotes" text,
	"txRecipientAccount" text NOT NULL,
	"inBankTypeCode" smallint NOT NULL,
	"inRecipientCompanyCode" integer NOT NULL,
	"txBankAccountCode" text NOT NULL,
	"txChangeReason" text,
	CONSTRAINT "reinbursement_notes_inReinbursementNoteID_key" UNIQUE("inReimbursementNoteID")
);
--> statement-breakpoint
ALTER TABLE "dt_dwh"."reimbursement_notes" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "dt_dwh"."m_company" (
	"uiCompanyId" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"daCreatedAt" timestamp DEFAULT now() NOT NULL,
	"daUpdatedAt" timestamp DEFAULT now() NOT NULL,
	"inCompanyCode" integer GENERATED BY DEFAULT AS IDENTITY (sequence name "dt_dwh"."dt_dwh."m_company_inCompanyCode_seq"" INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START WITH 1),
	"txCompanyName" text NOT NULL,
	"txCompanyDetails" text,
	"boActive" boolean NOT NULL,
	"boStatus" boolean NOT NULL,
	"inCompanyTypeCode" smallint NOT NULL,
	CONSTRAINT "m_company_inCompanyCode_key" UNIQUE("inCompanyCode"),
	CONSTRAINT "m_company_txCompanyName_key" UNIQUE("txCompanyName")
);
--> statement-breakpoint
ALTER TABLE "dt_dwh"."m_company" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "dt_dwh"."m_category" (
	"uiCategoryID" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"daCreatedAt" timestamp with time zone DEFAULT now() NOT NULL,
	"daUpdatedAt" timestamp with time zone DEFAULT now() NOT NULL,
	"inCategoryID" smallint NOT NULL,
	"txCategoryName" text NOT NULL,
	"txCategoryDescription" text,
	"boActive" boolean DEFAULT true NOT NULL,
	"boStatus" boolean DEFAULT true NOT NULL,
	CONSTRAINT "m_category_inCategoryID_key" UNIQUE("inCategoryID")
);
--> statement-breakpoint
ALTER TABLE "dt_dwh"."m_category" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "dt_dwh"."reimbursement_items" ADD CONSTRAINT "reimbursement_items_inReimbursementNoteID_fkey" FOREIGN KEY ("inReimbursementNoteID") REFERENCES "dt_dwh"."reimbursement_notes"("inReimbursementNoteID") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "dt_dwh"."reimbursement_items" ADD CONSTRAINT "reinbursement_items_inCategoryID_fkey" FOREIGN KEY ("inCategoryID") REFERENCES "dt_dwh"."m_category"("inCategoryID") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "dt_dwh"."m_employees" ADD CONSTRAINT "m_employees_inBankTypeCode_fkey" FOREIGN KEY ("inBankTypeCode") REFERENCES "dt_dwh"."m_bank"("inBankTypeCode") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "dt_dwh"."m_employees" ADD CONSTRAINT "m_employees_inCompanyCode_fkey" FOREIGN KEY ("inCompanyCode") REFERENCES "dt_dwh"."m_company"("inCompanyCode") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "dt_dwh"."m_employees" ADD CONSTRAINT "m_employees_inEmploymentTypeCode_fkey" FOREIGN KEY ("inEmploymentTypeCode") REFERENCES "dt_dwh"."m_employment"("inEmploymentTypeCode") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "dt_dwh"."m_employees" ADD CONSTRAINT "m_employees_inReligionCode_fkey" FOREIGN KEY ("inReligionCode") REFERENCES "dt_dwh"."m_religion"("inReligionCode") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "dt_dwh"."m_employees" ADD CONSTRAINT "m_employees_inRoleCode_fkey" FOREIGN KEY ("inRoleCode") REFERENCES "dt_dwh"."m_roles"("inRoleCode") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "dt_dwh"."reimbursement_notes" ADD CONSTRAINT "reinbursement_notes_inBankTypeCode_fkey" FOREIGN KEY ("inBankTypeCode") REFERENCES "dt_dwh"."m_bank"("inBankTypeCode") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "dt_dwh"."reimbursement_notes" ADD CONSTRAINT "reinbursement_notes_inRecipientCompanyCode_fkey" FOREIGN KEY ("inRecipientCompanyCode") REFERENCES "dt_dwh"."m_company"("inCompanyCode") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "dt_dwh"."m_company" ADD CONSTRAINT "m_company_inCompanyTypeCode_fkey" FOREIGN KEY ("inCompanyTypeCode") REFERENCES "dt_dwh"."m_company_type"("inCompanyTypeCode") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "dt_dwh"."reimbursement_items" AS PERMISSIVE FOR SELECT TO public USING (true);--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "dt_dwh"."m_employees" AS PERMISSIVE FOR SELECT TO public USING (true);--> statement-breakpoint
CREATE POLICY "Enable update for authenticated users" ON "dt_dwh"."reimbursement_notes" AS PERMISSIVE FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "Enable insert for authenticated users only" ON "dt_dwh"."reimbursement_notes" AS PERMISSIVE FOR INSERT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "dt_dwh"."reimbursement_notes" AS PERMISSIVE FOR SELECT TO public;--> statement-breakpoint
CREATE POLICY "Enable update for authenticated users" ON "dt_dwh"."m_category" AS PERMISSIVE FOR UPDATE TO public USING (true) WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "Enable insert for authenticated users only" ON "dt_dwh"."m_category" AS PERMISSIVE FOR INSERT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "dt_dwh"."m_category" AS PERMISSIVE FOR SELECT TO public;
*/